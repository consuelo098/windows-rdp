name: Windows RDP via Husarnet

on:
  workflow_dispatch:
    inputs:
      rdp_user:
        description: "RDP Username"
        required: false
        default: "HNUser"
      rdp_pass:
        description: "RDP Password"
        required: false
        default: "HNPass123"
      runtime_minutes:
        description: "RDP Alive Minutes (max 355)"
        required: false
        default: "355"

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:

      # Official Husarnet install for Windows
      - name: Install Husarnet for Windows
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://install.husarnet.com/windows/husarnet-latest-win64.exe" -OutFile "$env:TEMP\husarnet-installer.exe"
          Start-Process -FilePath "$env:TEMP\husarnet-installer.exe" -ArgumentList "/S" -Wait

      - name: Connect to Husarnet with Join Code
        shell: pwsh
        run: |
          $env:Path += ";C:\Program Files\Husarnet"
          & 'C:\Program Files\Husarnet\husarnet.exe' join "${{ secrets.HUSARNET_JOINCODE }}" github-actions-rdp
          & 'C:\Program Files\Husarnet\husarnet.exe' status

      - name: Create RDP User and Enable RDP
        shell: pwsh
        run: |
          $u = "${{ github.event.inputs.rdp_user }}"
          $p = "${{ github.event.inputs.rdp_pass }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
          }
          Enable-LocalUser -Name $u
          Set-ItemProperty "HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: Enable Windows Audio Service
        shell: pwsh
        run: |
          Set-Service -Name "Audiosrv" -StartupType Automatic
          Start-Service -Name "Audiosrv"

      - name: Downloading & Installing Essentials
        shell: cmd
        run: |
          curl -s -L -o C:\Users\Public\Desktop\Telegram.exe https://telegram.org/dl/desktop/win64
          curl -s -L -o C:\Users\Public\Desktop\Winrar.exe https://www.rarlab.com/rar/winrar-x64-621.exe
          powershell -Command "Invoke-WebRequest 'https://install.speedtest.net/app/windows/latest/speedtestbyookla_x64.msi' -OutFile 'C:\Users\Public\Desktop\speedtestbyookla_x64.msi'"
          powershell -Command "Invoke-WebRequest 'https://mirror2.internetdownloadmanager.com/idman642build43.exe' -OutFile 'C:\Users\Public\Desktop\idman642build43.exe'"
          msiexec.exe /i C:\Users\Public\Desktop\speedtestbyookla_x64.msi /quiet /norestart
          C:\Users\Public\Desktop\Winrar.exe /S
          del C:\Users\Public\Desktop\Winrar.exe
          del C:\Users\Public\Desktop\speedtestbyookla_x64.msi
          del /f "C:\Users\Public\Desktop\Epic Games Launcher.lnk"
          del /f "C:\Users\Public\Desktop\Unity Hub.lnk"

      - name: Show Husarnet Address
        shell: pwsh
        run: |
          $hosts = "$env:USERPROFILE\\.husarnet\\hosts.dat"
          if (Test-Path $hosts) { Get-Content $hosts } else { Write-Host "Husarnet hosts file not found." }

      - name: Keep RDP Session Alive
        shell: pwsh
        run: |
          $runtime = [int]"${{ github.event.inputs.runtime_minutes }}"
          if ($runtime -gt 355) { $runtime = 355 }
          $end = (Get-Date).AddMinutes($runtime)
          while ((Get-Date) -lt $end) {
            $left = [math]::Ceiling(($end - (Get-Date)).TotalMinutes)
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }
          
